import type { Context } from "hono";

export const ServeDashboard = async (c: Context) => {
  try {
    const { publicId } = c.req.param();

    if (!publicId || publicId.length !== 32) {
      return c.html(getErrorPage("Invalid dashboard URL"), 400);
    }

    const userDataRaw = await c.env.USERS_KV.get(`user:${publicId}`);
    if (!userDataRaw) {
      return c.html(getErrorPage("Dashboard not found"), 404);
    }

    const html = getDashboardHtml(publicId);
    return c.html(html, 200, {
      "Content-Type": "text/html; charset=utf-8",
      "Content-Security-Policy":
        "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; object-src 'none';",
    });
  } catch (err) {
    console.error("Error serving dashboard:", err);
    return c.html(getErrorPage("Internal server error"), 500);
  }
};

function getDashboardHtml(publicId: string): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Remote monitoring dashboard for Rosen Bridge Watchers - access health summaries from any PC or mobile device.">
  <title>Rosen Bridge Monitor</title>
  <style>
/* Base Reset & Body */
* { margin: 0; padding: 0; box-sizing: border-box; }

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

/* Layout Containers */
.container { max-width: 1200px; margin: 0 auto; padding: 20px; }
.header { text-align: center; margin-bottom: 30px; color: white; }
.header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

/* Login Form */
.login-form {
    background: white;
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    text-align: center;
}
.login-form input {
    width: 100%;
    max-width: 300px;
    padding: 15px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 16px;
    margin-bottom: 15px;
}
.login-form button {
    background: #667eea;
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}
.login-form button:hover { background: #5a67d8; }
#error { color: #e53e3e; margin-top: 10px; }
.loading { color: white; text-align: center; font-size: 1.2rem; }

/* Summary Section */
.summary {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 20px;
    margin-bottom: 30px;
}

.summary-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.summary-column-label {
    font-size: 1rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 10px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    text-align: center;
}

.summary-card {
    background: white;
    padding: 15px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    text-align: center;
    transition: transform 0.2s ease;
}
.summary-card:hover { transform: translateY(-3px); }

.summary-card h3 {
    font-size: 1.4rem;
    margin-bottom: 4px;
    font-weight: bold;
}
.summary-card p {
    font-size: 0.8rem;
    text-transform: uppercase;
    color: #555;
    margin: 0;
}

/* Color accents for summary cards */
.summary-card.healthy h3 { color: #10B981; }
.summary-card.unstable h3 { color: #F59E0B; }
.summary-card.broken h3 { color: #EF4444; }
.summary-card.sufficient h3 { color: #10B981; }
.summary-card.critical h3 { color: #F59E0B; }
.summary-card.exhausted h3 { color: #EF4444; }

/* Watcher Cards Grid */
.watchers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 25px;
    margin-bottom: 40px;
}

.watcher-card {
    background: white;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.watcher-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 35px rgba(0,0,0,0.15);
}

/* Watcher Header */
.watcher-header {
    display: table;
    width: 100%;
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f0f0f0;
}
.watcher-name {
    display: table-cell;
    vertical-align: middle;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
}
.network-badge {
    display: table-cell;
    vertical-align: middle;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: white;
    text-align: center;
}

/* Network colors */
.network-ergo { background: #FF5E18; }
.network-ethereum { background: #627EEA; }
.network-binance { background: #F3BA2F; }
.network-bitcoin { background: #F7931A; }
.network-cardano { background: #0033AD; }
.network-unknown { background: #6B7280; }

/* Status rows */
.status-row-2col {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: 1rem;
}
.status-col { flex: 1; }
.status-col.right {
    text-align: right;
    color: #333;
    font-size: 1rem;
    font-weight: 500;
}

/* Health colors */
.health-green { color: #10b981; font-weight: 600; }
.health-orange { color: #f59e0b; font-weight: 600; }
.health-red { color: #ef4444; font-weight: 600; }
.health-down { color: #ff1744; font-weight: bold; }

/* Permit status */
.permit-sufficient { color: #10B981; font-weight: 600; }
.permit-critical { color: #F59E0B; font-weight: 600; }
.permit-exhausted { color: #EF4444; font-weight: 600; }

/* Progress Bar */
.progress-bar { 
    width: 100%; 
    height: 6px; 
    background: #E5E7EB; 
    border-radius: 3px; 
    overflow: hidden; 
    margin-top: 8px; 
}
.progress-fill { height: 100%; transition: width 0.3s ease; }
.progress-healthy { background: #10B981; }
.progress-warning { background: #F59E0B; }
.progress-critical { background: #EF4444; }

/* Balances */
.balances-separator {
    border: none;
    border-top: 1px solid #ccc;
    margin: 10px 0 6px 0;
}

.balances-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1rem;
    margin-top: 6px;
}

.balances-row div { flex: 1; }
.balances-row div:first-child { text-align: left; }
.balances-row div:nth-child(2) { text-align: center; }
.balances-row div:last-child { text-align: right; }

.status-label { font-weight: 500; color: #666; }
.status-value { font-weight: 600; }

/* Last update */
.last-updated-top {
    text-align: center;
    margin: 10px 0;
    font-size: 1.6rem;
    font-weight: 600;
    color: #fff;
}
.last-updated-top.stale { color: #EF4444; font-weight: 700; }

/* Summary count styling */
.summary-card h3 .count-num { font-weight: 800; }
.summary-card h3 .count-div,
.summary-card h3 .count-den { color: #1F2937; font-weight: 800; }

.summary-card.healthy h3 .count-num { color: #10B981; }
.summary-card.unstable h3 .count-num { color: #F59E0B; }
.summary-card.broken h3 .count-num { color: #EF4444; }

/* Responsive */
@media (max-width: 768px) {
    .container { padding: 15px; }
    .header h1 { font-size: 1.5rem; }
    .watchers-grid { grid-template-columns: 1fr; }
    .summary { flex-direction: column; }
}
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Rosen Bridge Monitor</h1>
      <div id="lastUpdatedTop" class="last-updated-top">Last updated: --</div>
    </div>

    <div id="login-form" class="login-form">
      <h2>Enter Dashboard Passphrase</h2>
      <input type="password" id="passphrase" placeholder="Enter your passphrase" />
      <br>
      <button onclick="decryptAndShow()">Access Dashboard</button>
      <div id="error"></div>
    </div>

    <div id="loading" class="loading" style="display: none;">
      Decrypting your data...
    </div>

    <div id="content" style="display: none;">
      <div class="summary" id="summary"></div>
      <div class="watchers-grid" id="watchers"></div>
    </div>
  </div>

  <script>
  (function(){
    const PUBLIC_ID = ${JSON.stringify(publicId)};
    const DEFAULT_KDF_ITERS = 100000;

    const $ = (sel) => document.querySelector(sel);

    function b64ToBytes(b64) {
      b64 = b64.replace(/-/g, '+').replace(/_/g, '/');
      const pad = b64.length % 4; if (pad) b64 += '='.repeat(4 - pad);
      const bin = atob(b64);
      const out = new Uint8Array(bin.length);
      for (let i = 0; i < bin.length; i++) out[i] = bin.charCodeAt(i);
      return out;
    }

    function getNetworkClass(network) {
      const n = String(network || 'unknown').toLowerCase();
      return \`network-\${n}\`;
    }

    function getProgressClass(status) {
      if (status === 'exhausted') return 'progress-critical';
      if (status === 'critical') return 'progress-warning';
      return 'progress-healthy';
    }

    function normalizeWatcher(w) {
      const out = Object.assign({}, w);
      if (out.port == null && out.ui_port != null) out.port = out.ui_port;
      if (!out.permitStatus && out.permitCount && out.permitsPerEvent) {
        // Build permitStatus from raw data
        const perEvent = out.permitsPerEvent;
        const active = out.permitCount.active || 0;
        const total = out.permitCount.total || 0;
        const availableBlocks = Math.floor(active / perEvent);
        const totalBlocks = Math.floor(total / perEvent);
        
        let status = 'exhausted';
        if (availableBlocks >= 2) status = 'sufficient';
        else if (availableBlocks === 1) status = 'critical';
        
        out.permitStatus = {
          status,
          available: availableBlocks,
          total: totalBlocks,
          message: \`\${availableBlocks}/\${totalBlocks} blocks\`
        };
      }
      return out;
    }

    function renderSummary(summary) {
      return \`
        <div class="summary-column">
          <div class="summary-column-label">WATCHERS</div>
          <div class="summary-card healthy">
            <h3>
              <span class="count-num">\${summary.healthy}</span>
              <span class="count-div">/</span>
              <span class="count-den">\${summary.total}</span>
            </h3>
            <p>Healthy</p>
          </div>
          <div class="summary-card unstable">
            <h3>
              <span class="count-num">\${summary.unstable}</span>
              <span class="count-div">/</span>
              <span class="count-den">\${summary.total}</span>
            </h3>
            <p>Unstable</p>
          </div>
          <div class="summary-card broken">
            <h3>
              <span class="count-num">\${summary.broken}</span>
              <span class="count-div">/</span>
              <span class="count-den">\${summary.total}</span>
            </h3>
            <p>Broken or Offline</p>
          </div>
        </div>
        <div class="summary-column">
          <div class="summary-column-label">PERMIT STATUS</div>
          <div class="summary-card sufficient"><h3>\${summary.sufficient}</h3><p>Sufficient</p></div>
          <div class="summary-card critical"><h3>\${summary.critical}</h3><p>Critical</p></div>
          <div class="summary-card exhausted"><h3>\${summary.exhausted}</h3><p>Exhausted</p></div>
        </div>\`;
    }

    function renderWatcher(watcher) {
      const permitStatus = watcher.permitStatus || { status: 'unknown', message: 'No data' };
      const formatBalance = (b) => (typeof b === 'number' ? b.toFixed(2) : '0.00');
      const cleanName = watcher.container ? watcher.container.replace(/-service-1$/, '') : (watcher.name || '');
      
      const avail = Number.isFinite(permitStatus.available) ? permitStatus.available : 0;
      const total = Number.isFinite(permitStatus.total) ? permitStatus.total : 0;
      const percent = total > 0 ? Math.round((avail / total) * 100) : 0;

      const permitsHTML = \`
        <div class="status-row-2col">
          <div class="status-col"><strong>Permits:</strong> \${avail}/\${total}</div>
          <div class="status-col right"><strong>Status:</strong>
            <span class="permit-\${permitStatus.status}">\${permitStatus.message || permitStatus.status}</span>
          </div>
        </div>
        <div class="progress-bar">
          <div class="progress-fill \${getProgressClass(permitStatus.status)}" style="width:\${percent}%"></div>
        </div>
      \`;

      const errorHTML = watcher.errors && watcher.errors.length > 0 
        ? \`<div style="margin-top: 10px; padding: 8px; background: #FEF2F2; color: #991B1B; border-radius: 6px; font-size: 0.9rem;">
             <strong>Errors:</strong> \${watcher.errors.slice(0, 2).join(', ')}\${watcher.errors.length > 2 ? '...' : ''}
           </div>\`
        : '';

      return \`
        <div class="watcher-card">
          <div class="watcher-header">
            <div class="watcher-name">\${cleanName}</div>
            <div class="network-badge \${getNetworkClass(watcher.network)}">\${watcher.network || 'unknown'}</div>
          </div>

          <div class="status-row-2col">
            <div class="status-col"><strong>Health:</strong>
<span class="\${watcher.healthStatus === 'Healthy' ? 'health-green' : watcher.healthStatus === 'Unstable' ? 'health-orange' : watcher.healthStatus === 'Broken' ? 'health-red' : 'health-down'}">\${watcher.healthStatus || 'Unknown'}</span>            </div>
            <div class="status-col right"><strong>Port:</strong> \${watcher.ui_port || watcher.port || ''}</div>
          </div>

          \${permitsHTML}

          <hr class="balances-separator">
          <div class="balances-row">
            <div><span class="status-label">ERG:</span> <span class="status-value">\${formatBalance(watcher.currentBalance)}</span></div>
            <div><span class="status-label">eRSN:</span> <span class="status-value">\${formatBalance(watcher.eRsnBalance)}</span></div>
            <div><span class="status-label">RSN:</span> <span class="status-value">\${formatBalance(watcher.rsnBalance)}</span></div>
          </div>

          \${errorHTML}
        </div>\`;
    }

    async function deriveAesGcmKey(passphrase, saltB64, iterations) {
      const enc = new TextEncoder();
      const passphraseBytes = enc.encode(passphrase);
      const saltBytes = b64ToBytes(saltB64);
      const keyMaterial = await crypto.subtle.importKey(
        'raw', passphraseBytes, { name: 'PBKDF2' }, false, ['deriveKey']
      );
      return crypto.subtle.deriveKey(
        { name: 'PBKDF2', salt: saltBytes, iterations, hash: 'SHA-256' },
        keyMaterial,
        { name: 'AES-GCM', length: 256 },
        false,
        ['decrypt']
      );
    }

    async function decryptData(encryptedData, passphrase, userSaltB64, kdfIterations) {
      if (!userSaltB64) throw new Error('Missing user salt for KDF');
      if (!passphrase) throw new Error('Missing passphrase');

      const iters = (typeof kdfIterations === 'number' && kdfIterations > 0) ? kdfIterations : DEFAULT_KDF_ITERS;
      const key = await deriveAesGcmKey(passphrase, userSaltB64, iters);
      const iv = b64ToBytes(encryptedData.nonce);
      const ct = b64ToBytes(encryptedData.ciphertext);

      const ptBuf = await crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, ct);
      const dec = new TextDecoder();
      return JSON.parse(dec.decode(ptBuf));
    }

    function renderDashboard(data) {
      const watchersArray = Object.values(data.watchers || {}).map(normalizeWatcher);
      
      // Compute summary from actual data
      const summary = {
        total: watchersArray.length,
        healthy: watchersArray.filter(w => w.healthStatus === 'Healthy').length,
        unstable: watchersArray.filter(w => w.healthStatus === 'Unstable').length,
        broken: watchersArray.filter(w => w.healthStatus === 'Broken').length,
        sufficient: watchersArray.filter(w => w.permitStatus?.status === 'sufficient').length,
        critical: watchersArray.filter(w => w.permitStatus?.status === 'critical').length,
        exhausted: watchersArray.filter(w => w.permitStatus?.status === 'exhausted').length
      };

      $('#summary').innerHTML = renderSummary(summary);
      $('#watchers').innerHTML = watchersArray.map(renderWatcher).join('');
      
      if (data.lastUpdate) {
        const t = new Date(data.lastUpdate);
        const el = $('#lastUpdatedTop');
        el.textContent = \`Last updated: \${t.toLocaleTimeString()}\`;
        const ageSeconds = (Date.now() - t.getTime()) / 1000;
        if (ageSeconds > 30) el.classList.add('stale'); 
        else el.classList.remove('stale');
      }
    }

    async function decryptAndShow() {
      try {
        $('#error').textContent = '';
        const pass = $('#passphrase')?.value || '';
        if (!pass) {
          $('#error').textContent = 'Please enter a passphrase';
          return;
        }

        $('#login-form').style.display = 'none';
        $('#loading').style.display = 'block';

        const res = await fetch(\`/api/blob/\${PUBLIC_ID}\`);
        if (!res.ok) throw new Error('Failed to load encrypted blob');
        const j = await res.json();

        const saltB64 = j?.userInfo?.salt;
        const kdfIters = j?.userInfo?.kdfParams?.iterations || DEFAULT_KDF_ITERS;

        if (!saltB64 || !j?.data) throw new Error('Missing data/salt from server');

        const decrypted = await decryptData(j.data, pass, saltB64, kdfIters);

        $('#loading').style.display = 'none';
        $('#content').style.display = 'block';
        renderDashboard(decrypted);

      } catch (e) {
        console.error('decryptAndShow() error:', e);
        $('#loading').style.display = 'none';
        $('#login-form').style.display = 'block';
        $('#error').textContent = 'Invalid passphrase or decryption failed';
      }
    }

    window.decryptAndShow = decryptAndShow;
    $('#passphrase')?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') decryptAndShow();
    });
    setTimeout(() => $('#passphrase')?.focus(), 0);
  })();
  </script>
</body>
</html>\`;
}

function getErrorPage(message: string): string {
  return \`<!DOCTYPE html>
<html><head><meta charset="utf-8"><title>Dashboard Error</title>
<style>
body{
  font-family:Arial,sans-serif;
  margin:40px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height:100vh;
  display:flex;
  align-items:center;
  justify-content:center;
} 
.card{
  max-width:640px;
  padding:30px;
  border-radius:15px;
  background:#fff;
  box-shadow:0 8px 24px rgba(0,0,0,.1);
  text-align:center;
}
h2{color:#333;margin-bottom:15px;}
p{color:#666;}
</style>
</head><body><div class="card"><h2>Dashboard Error</h2><p>\${message}</p></div></body></html>\`;
}

export default ServeDashboard;
